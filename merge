#include <stdio.h>
#include <stdlib.h>
//输入字母代表输入结束
typedef int ElementType;
typedef struct Node *PtrToNode;
struct Node {
    ElementType Data;
    PtrToNode   Next;
};
typedef PtrToNode List;

List Read();
void Print( List L ); /* 空链表将输出NULL */

List Merge( List L1, List L2 );

int main()
{
    List L1, L2, L;
    L1 = Read();
    L2 = Read();
    L = Merge(L1, L2);
    Print(L);
    Print(L1);
    Print(L2);
    return 0;
}

List Read()
{
	List current = (List)malloc(sizeof(struct Node));
	List head = current;
	ElementType k;
	while(scanf("%d", &k)){
		current->Next = (List)malloc(sizeof(struct Node));
		current->Next->Data = k;
		current = current->Next;
	}
	current->Next = NULL;
//	head = head->Next;
	getchar();
	return head;
}
void Print( List L ) /* 空链表将输出NULL */
{
	List ptrL = L;
	if(!(ptrL->Next)){
		printf("NULL\n");
		return;
	}
	while(ptrL->Next != NULL){
		printf("%d ", ptrL->Next->Data);
		ptrL = ptrL->Next;
	}
	printf("\n");
}
List Merge( List l1, List l2 )
{
	List L1 = l1->Next;
	List L2 = l2->Next;
	List L = (List)malloc(sizeof(struct Node));
	List head = L, tempCell;
	while(L1 != NULL && L2 != NULL){
		if(L1->Data <=L2->Data){
			while(L1 != NULL && L1->Data <= L2->Data){
				L->Next = L1;
				L = L->Next;
				L1 = L1->Next;
			}
		}else{
			while(L2 != NULL && L1->Data > L2->Data){
				L->Next = L2;
				L=L2->Next;
				L2 = L2->Next;
			}
		}
	}
	
	if(L1){
		L->Next = L1;
	}
	if(L2){
		L->Next = L2;
	}
	l1->Next = NULL;
	l2->Next = NULL;
//	tempCell = head;
//	head = head->Next;
//	free(tempCell);
	return head;
}
